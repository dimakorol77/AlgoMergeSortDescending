import java.util.Arrays;

public class MergeSortDescending {

    public static void main(String[] args) {
        // Исходный массив для сортировки
        int[] array = {38, 27, 43, 3, 9, 82, 10};
        System.out.println("Original Array: " + Arrays.toString(array));

        // Вызов метода сортировки слиянием
        mergeSort(array, 0, array.length - 1);

        // Вывод отсортированного массива
        System.out.println("Sorted Array in Descending Order: " + Arrays.toString(array));
    }

    /**
     * Метод для сортировки массива с использованием алгоритма сортировки слиянием.
     * @param array Массив для сортировки.
     * @param left Левая граница массива.
     * @param right Правая граница массива.
     */
    public static void mergeSort(int[] array, int left, int right) {
        // Проверка, что в массиве более одного элемента
        if (left < right) {
            // Находим середину массива
            int middle = (left + right) / 2;

            // Рекурсивно сортируем первую половину
            mergeSort(array, left, middle);
            // Рекурсивно сортируем вторую половину
            mergeSort(array, middle + 1, right);

            // Сливаем отсортированные половины в единый массив
            merge(array, left, middle, right);
        }
    }

    /**
     * Метод для слияния двух отсортированных половин массива.
     * @param array Массив для слияния.
     * @param left Левая граница массива.
     * @param middle Средняя точка, где делится массив.
     * @param right Правая граница массива.
     */
    public static void merge(int[] array, int left, int middle, int right) {
        // Вычисляем размер временных массивов для левой и правой частей
        int n1 = middle - left + 1; // Размер левого подмассива
        int n2 = right - middle;    // Размер правого подмассива

        // Создаем временные массивы для хранения левой и правой частей
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        // Копируем данные в временные массивы
        for (int i = 0; i < n1; ++i)
            leftArray[i] = array[left + i];
        for (int j = 0; j < n2; ++j)
            rightArray[j] = array[middle + 1 + j];

        // Индексы для итерации по временным массивам
        int i = 0, j = 0;

        // Индекс для итерации по исходному массиву
        int k = left;

        // Слияние временных массивов обратно в исходный массив в порядке убывания
        while (i < n1 && j < n2) {
            // Сравниваем элементы и записываем больший в исходный массив
            if (leftArray[i] >= rightArray[j]) {
                array[k] = leftArray[i];
                i++; // Переходим к следующему элементу в левом массиве
            } else {
                array[k] = rightArray[j];
                j++; // Переходим к следующему элементу в правом массиве
            }
            k++; // Переходим к следующему элементу в исходном массиве
        }

        // Копируем оставшиеся элементы из левого массива, если они остались
        while (i < n1) {
            array[k] = leftArray[i];
            i++;
            k++;
        }

        // Копируем оставшиеся элементы из правого массива, если они остались
        while (j < n2) {
            array[k] = rightArray[j];
            j++;
            k++;
        }
    }
}
